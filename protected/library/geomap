<?php
/**
 * 
$map = new test();
$result = $map->lookup('address,city,state');

$lat=$result['lat'];// latitude
$lng=$result['lng']; // longitude

$map->center_lat=$lat; // set latitude for center location
$map->center_lng=$lng; // set langitude for center location
$map->zoom=14;
$isclickable='true';
$title="This great way to add marker";
$info="<b>Thanks <blink>User</blink>, enjoy this great way to add info.</b>";
$map->addMarker($lat,$lng,$isclickable,$title,$info);

echo $map->showmap();


<div id="map" style="width:400px; height:400px;display:none" ></div>
 * @author Phpscriptsmall
 *
 */
interface iUtilsGeoAddress {
	public function lookup($address);
}

class geomap implements iUtilsGeoAddress{

	private $response = null;
	private $address = null;

	
	var $code='';  // Do not edit this.
	var $zoom=14; // Zoop Level.
	var $center_lat='28.022900221052016'; // google map center location
	var $center_lng='73.3011245727539'; // google map center location
	var $divID='map'; // The div id where you want to 	place your google map
	var $marker=array(); // Array to store markers information.
	var $instance=1;

	public function __construct() {

		try {
			
				echo '<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>';
			
		}
		catch (Exception $e){
			$this->exception[] = 'Exception caught on '.$e->getFile().":\n". $e->getMessage(). ' on line '.$e->getLine()."\n";
			return false;
		}

	}

	public function lookup($address){

		try {
			$this->address = $address;
			$address = str_replace (" ", "+", urlencode($address));
			$details_url = "http://maps.googleapis.com/maps/api/geocode/json?address=".$address."&sensor=false";
				
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, $details_url);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			$chexec = curl_exec($ch);
			if (!$chexec) {
				throw new Exception( 'Your request has issued a malformed request.');
			}
			$response = json_decode($chexec, true);

			// If Status Code is ZERO_RESULTS, OVER_QUERY_LIMIT, REQUEST_DENIED or INVALID_REQUEST
			if ($response['status'] != 'OK') {
				throw new Exception( 'No response recieved ('.$this->address.'):  '.$response['status']);
			}
				
			$set1 = false;
			$set2 = false;
			$set3 = false;
			print_r($response);
			foreach($response as $key => $value){
				
				foreach($value[0]['address_components'] as $key1 => $value1){
					
					if($value1['types'][0] == 'administrative_area_level_2' || $value1['types'][0] == 'administrative_area_level_1'){
						$currCounty = $value1['short_name'];
						$set1 = true;
					}
						
					if($value1['types'][0] == 'country'){
						$currCountry = $value1['short_name'];
						$set2 = true;
					}
					if($value1['types'][0] == 'postal_town'){
						$currTown = $value1['long_name'];
						$set3 = true;
					}
					if($value1['types'][0] == 'locality'){
						$currTown = $value1['long_name'];
						$set3 = true;
					}
					if($set1 && $set2 && $set3){
						break(2);
					}
				}
			}
			$this->response = $response;
			$geometry = $response['results'][0]['geometry'];
				
			$longitude = $geometry['location']['lng'];
			$latitude = $geometry['location']['lat'];
				
			$array = array(
					'lat' => $geometry['location']['lat'],
					'lng' => $geometry['location']['lng'],
					'country' => $currCountry,
					'county' => $currCounty,
					'town' => $currTown

			);
			return $array;
		}
		catch (Exception $e){
			$this->exception[] = 'Exception caught on '.$e->getFile().":\n". $e->getMessage(). ' on line '.$e->getLine()."\n";
			print_r($this->exception);
			return false;
		}
	}

	public function getResponse(){

		try {
			if(!is_array($this->response)){
				throw new Exception( 'No response yet recieved for: '.$this->address);
			}
			return $this->response;
		}
		catch (Exception $e){
			$this->exception[] = 'Exception caught on '.$e->getFile().":\n". $e->getMessage(). ' on line '.$e->getLine()."\n";
			return false;
		}
	}



	
	// Intialized google map scripts.
	private function start()
	{
		
		$this->code='
		<script type="text/javascript">
      (function() {
        window.onload = function(){
        	// Creating a LatLng object containing the coordinate for the center of the map  
          var latlng = new google.maps.LatLng('.$this->center_lat.', '.$this->center_lng.');  
          // Creating an object literal containing the properties we want to pass to the map  
          var options = {  
          	zoom: '.$this->zoom.',
          	center: latlng,
          	mapTypeId: google.maps.MapTypeId.ROADMAP
          };  
          // Calling the constructor, thereby initializing the map  
          var map = new google.maps.Map(document.getElementById("'.$this->divID.'"), options); ';
		   
          
		  for($i=0;$i<count($this->marker);$i++)
		  {
		  
			 $this->code.=' var marker'.$i.' = new google.maps.Marker({
				position: new google.maps.LatLng('.$this->marker[$i]['lat'].', '.$this->marker[$i]['lng'].'), 
				map: '.$this->marker[$i]['map'].',
				title: "'.$this->marker[$i]['title'].'",
				clickable: '.$this->marker[$i]['click'].',
				icon: "'.$this->marker[$i]['icon'].'"
			  });';
		  
		  // Creating an InfoWindow object
			if($this->marker[$i]['info']!='')
			{
				$this->code.=' var infowindow'.$i.' = new google.maps.InfoWindow({content: "'.$this->marker[$i]['info'].'"}); ';
	   			$this->code.=" google.maps.event.addListener(marker".$i.", 'click', function() { infowindow".$i.".open(map, marker".$i."); });"; 
			}
	}
    
	
	$this->code.='	}
      })();
		</script>';
		
	}

	// Add markers to google map.
	
	public function addMarker($lat='14.0730',$lng='56.0848',$click='false',$title='My WorkPlace',$info='Hello World',$icon='',$map='map')
	{
		$count=count($this->marker);	
		$this->marker[$count]['lat']=$lat;
		$this->marker[$count]['lng']=$lng;
		$this->marker[$count]['map']=$map;
		$this->marker[$count]['title']=$title;
		$this->marker[$count]['click']=$click;
		$this->marker[$count]['icon']=$icon;
		$this->marker[$count]['info']=$info;
	}
	
	// Call this function to create a google map.
	
	public function showmap()
	{
		$this->start();
		$this->instance++;
		return $this->code;
	}
	
}


?>
 